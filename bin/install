#!/usr/bin/env php
<?php

/**
 * WarvilPHP Framework Installer
 * This script sets up the WarvilPHP framework after installation
 */

$green = "\033[0;32m";
$yellow = "\033[1;33m";
$reset = "\033[0m";

echo "{$yellow}
╦ ╦┌─┐┬─┐┬  ┬┬┬  ╔═╗╦ ╦╔═╗
║║║├─┤├┬┘└┐┌┘││  ╠═╝╠═╣╠═╝
╚╩╝┴ ┴┴└─ └┘ ┴┴─┘╩  ╩ ╩╩   

{$reset}
        Installing WarvilPHP Framework...

";

// Create necessary directories if they don't exist
$directories = [
    'app/controllers',
    'app/models',
    'app/views',
    'app/middlewares',
    'app/services',
    'app/database/sql',
    'app/database/factories',
    'app/shared/components',
    'app/shared/layouts',
    'app/shared/errors',
    'public/uploads',
    'public/assets',
    'public/js',
    'public/styles',
];

foreach ($directories as $dir) {
    if (!is_dir($dir)) {
        if (mkdir($dir, 0755, true)) {
            echo "{$green}✓ {$reset}Created directory: {$dir}\n";
        } else {
            echo "{$yellow}! {$reset}Could not create directory: {$dir}\n";
        }
    } else {
        echo "{$yellow}! {$reset}Directory already exists: {$dir}\n";
    }
}

// Make warvil executable
if (file_exists('warvil')) {
    chmod('warvil', 0755);
    echo "{$green}✓ {$reset}Made warvil command executable\n";
}

// Create environment file if it doesn't exist
if (!file_exists('.env') && file_exists('.env.example')) {
    copy('.env.example', '.env');
    echo "{$green}✓ {$reset}Created environment file (.env)\n";
}

// Create warvil.json if it doesn't exist
if (!file_exists('warvil.json') && file_exists('warvil.json.example')) {
    copy('warvil.json.example', 'warvil.json');
    echo "{$green}✓ {$reset}Created configuration file (warvil.json)\n";
}

// Add initial files that are necessary for WarvilPHP to work
$defaultFiles = [
    'app/shared/errors/404.php' => '<?php http_response_code(404); ?><h1>404 - Page Not Found</h1><p>The requested page could not be found.</p>',
    'app/shared/layouts/main.php' => '<!DOCTYPE html><html><head><title><?= htmlspecialchars($warvilConfig[\'name\']) ?></title><meta charset="UTF-8"><link rel="stylesheet" href="<?= htmlspecialchars($baseStyle) ?>"></head><body><?= $this->content ?></body></html>',
    'public/styles/base.css' => '* {padding: 0;margin: 0;box-sizing: border-box;font-family: "Arial", sans-serif;}'
];

foreach ($defaultFiles as $path => $content) {
    $directory = dirname($path);
    if (!is_dir($directory)) {
        mkdir($directory, 0755, true);
    }
    
    if (!file_exists($path)) {
        file_put_contents($path, $content);
        echo "{$green}✓ {$reset}Created file: {$path}\n";
    } else {
        echo "{$yellow}! {$reset}File already exists: {$path}\n";
    }
}

// Set up a symbolic link for the warvil command (Unix-like systems)
if (PHP_OS_FAMILY !== 'Windows') {
    $binPath = '/usr/local/warvil';
    $warvilScriptPath = getcwd() . '/warvil';
    
    // Check if we have permission to create the symlink
    if (is_writable(dirname($binPath))) {
        if (!file_exists($binPath)) {
            symlink($warvilScriptPath, $binPath);
            echo "{$green}✓ {$reset}Created symbolic link for warvil command\n";
        } else {
            echo "{$yellow}! {$reset}Symbolic link already exists\n";
        }
    } else {
        echo "{$yellow}! {$reset}Could not create symlink for warvil command (permission denied). You may need to run this manually:\n";
        echo "  sudo ln -s {$warvilScriptPath} {$binPath}\n";
    }
}

// Generate an app key
if (file_exists('.env')) {
    $envContent = file_get_contents('.env');
    if (strpos($envContent, 'APP_KEY=base64:') === false || strpos($envContent, 'APP_KEY=base64:your-random-key-here') !== false) {
        echo "{$yellow}Generating application key...{$reset}\n";
        // Execute the key generation command
        if (file_exists('warvil')) {
            exec('php warvil key:generate', $output);
            foreach ($output as $line) {
                echo $line . "\n";
            }
        } else {
            echo "{$yellow}! {$reset}Could not generate application key. Please run manually:\n";
            echo "  php warvil key:generate\n";
        }
    }
}

// Update composer.json to include the proper cli commands
echo "{$green}✓ {$reset}WarvilPHP installed successfully!\n\n";

echo "{$yellow}Next steps:{$reset}\n";
echo "  1. Configure your database in .env\n";
echo "  2. Start the development server with: {$yellow}composer serve{$reset}\n";
echo "  3. Create components with: {$yellow}php warvil make:controller YourController{$reset}\n";
echo "\nEnjoy building with WarvilPHP!\n";